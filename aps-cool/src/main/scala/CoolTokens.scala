import cool_implicit._
/* Generated by Scala-Bison version 1.1 */

object CoolTokens {
  class YYSymbol;

  class YYToken extends YYSymbol;

  case class YYCHAR(yy: Char) extends YYToken {
    override def toString() : String = "'" + yy + "'";
  }
  case class YYEOF() extends YYToken;
  case class CASE() extends YYToken;
  case class CLASS() extends YYToken;
  case class DEF() extends YYToken;
  case class ELSE() extends YYToken;
  case class EXTENDS() extends YYToken;
  case class IF() extends YYToken;
  case class MATCH() extends YYToken;
  case class NATIVE() extends YYToken;
  case class NEW() extends YYToken;
  case class NULL() extends YYToken;
  case class OVERRIDE() extends YYToken;
  case class SUPER() extends YYToken;
  case class THIS() extends YYToken;
  case class VAR() extends YYToken;
  case class WHILE() extends YYToken;
  case class STR_LIT(yy: Symbol) extends YYToken;
  case class INT_LIT(yy: Symbol) extends YYToken;
  case class BOOL_LIT(yy: Boolean) extends YYToken;
  case class TYPEID(yy: Symbol) extends YYToken;
  case class OBJECTID(yy: Symbol) extends YYToken;
  case class EQEQ() extends YYToken;
  case class LE() extends YYToken;
  case class ARROW() extends YYToken;
  case class ERROR(yy: String) extends YYToken;
  case class UNARY() extends YYToken;
}
