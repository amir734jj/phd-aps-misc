import cool_implicit._
/* Generated by Scala-Bison version 1.1 */

/** Generated LALR(1) recursive-ascent-descent parser */
class CoolParser extends CoolParserBase {
  class YYNonterminal extends CoolTokens.YYSymbol;

  case class YYNTerror(yy : String) extends YYNonterminal;
  case class YYNTclass_list(yy: Classes) extends YYNonterminal;
  case class YYNTclass_decl(yy: Class) extends YYNonterminal;
  case class YYNTsuperclass(yy: Symbol) extends YYNonterminal;
  case class YYNTvar_type(yy: Symbol) extends YYNonterminal;
  case class YYNTfeature_list(yy: Features) extends YYNonterminal;
  case class YYNTfeature(yy: Feature) extends YYNonterminal;
  case class YYNTvar_formals(yy: Formals) extends YYNonterminal;
  case class YYNTvar_formal_list(yy: Formals) extends YYNonterminal;
  case class YYNTformals(yy: Formals) extends YYNonterminal;
  case class YYNTformal_list(yy: Formals) extends YYNonterminal;
  case class YYNTvar_formal(yy: Formal) extends YYNonterminal;
  case class YYNTformal(yy: Formal) extends YYNonterminal;
  case class YYNTexpr(yy: Expression) extends YYNonterminal;
  case class YYNTblock(yy: Expression) extends YYNonterminal;
  case class YYNTiexpr(yy: Expression) extends YYNonterminal;
  case class YYNTvar_init(yy: Expression) extends YYNonterminal;
  case class YYNTactuals(yy: Expressions) extends YYNonterminal;
  case class YYNTexp_list(yy: Expressions) extends YYNonterminal;
  case class YYNTstmt_list(yy: Expressions) extends YYNonterminal;
  case class YYNTistmt_list(yy: Expressions) extends YYNonterminal;
  case class YYNTcase_list(yy: Cases) extends YYNonterminal;
  case class YYNTsimple_cases(yy: Cases) extends YYNonterminal;
  case class YYNTsimple_case(yy: Case) extends YYNonterminal;
  case class YYNTopt_override(yy: Boolean) extends YYNonterminal;
  case class YYNTprogram() extends YYNonterminal;
  case class YYNTno_comma1b() extends YYNonterminal;
  case class YYNTno_comma1() extends YYNonterminal;
  case class YYNTno_comma1a() extends YYNonterminal;
  case class YYNTvar1() extends YYNonterminal;
  case class YYNTvar2() extends YYNonterminal;
  case class YYNTno_comma2b() extends YYNonterminal;
  case class YYNTno_comma2() extends YYNonterminal;
  case class YYNTno_comma2a() extends YYNonterminal;
  case class YYNTcexpr() extends YYNonterminal;
  case class YYNTno_comma3b() extends YYNonterminal;
  case class YYNTno_comma3() extends YYNonterminal;
  case class YYNTno_comma3a() extends YYNonterminal;

  private var yynt : YYNonterminal = null;

  case class YYError(s:String) extends Exception(s);

  // boilerplate

  var yydebug : Boolean = false;
  private var yyinput : Iterator[CoolTokens.YYToken] = null;
  private var yycur : CoolTokens.YYToken = null;

  private def yynext() = {
    yycur = {
      if (yyinput.hasNext) {
        yyinput.next
      } else {
        CoolTokens.YYEOF();
      }
    }
  }

  private def yypanic(test : (CoolTokens.YYToken) => Boolean) = {
    while (!test(yycur)) {
      yynext;
      if (yycur == CoolTokens.YYEOF()) throw new YYError("Giving up")
    }
  }

  def yyreset(input : Iterator[CoolTokens.YYToken]) = {
    yyinput = input;
    yynt = null;
    yynext
  }

  def yyparse() : Boolean = {
    try {
      parse_program()
      parse_YYEOF()
      true
    } catch {
      case YYError(s) => yyerror(s); false
    }
  }

  def parse_YYCHAR(yy:Char) : Unit = {
    yycur match {
      case CoolTokens.YYCHAR(`yy`) => yynext; ()
      case _ => throw new YYError("Expected '"+yy+"'");
    }
  }

  // generated parser

  def parse_YYEOF() : Unit = {
    yycur match {
      case CoolTokens.YYEOF() => yynext; ()
      case _ => throw new YYError("Expected 'YYEOF'");
    }
  }

  def parse_CASE() : Unit = {
    yycur match {
      case CoolTokens.CASE() => yynext; ()
      case _ => throw new YYError("Expected 'CASE'");
    }
  }

  def parse_CLASS() : Unit = {
    yycur match {
      case CoolTokens.CLASS() => yynext; ()
      case _ => throw new YYError("Expected 'CLASS'");
    }
  }

  def parse_DEF() : Unit = {
    yycur match {
      case CoolTokens.DEF() => yynext; ()
      case _ => throw new YYError("Expected 'DEF'");
    }
  }

  def parse_ELSE() : Unit = {
    yycur match {
      case CoolTokens.ELSE() => yynext; ()
      case _ => throw new YYError("Expected 'ELSE'");
    }
  }

  def parse_EXTENDS() : Unit = {
    yycur match {
      case CoolTokens.EXTENDS() => yynext; ()
      case _ => throw new YYError("Expected 'EXTENDS'");
    }
  }

  def parse_IF() : Unit = {
    yycur match {
      case CoolTokens.IF() => yynext; ()
      case _ => throw new YYError("Expected 'IF'");
    }
  }

  def parse_MATCH() : Unit = {
    yycur match {
      case CoolTokens.MATCH() => yynext; ()
      case _ => throw new YYError("Expected 'MATCH'");
    }
  }

  def parse_NATIVE() : Unit = {
    yycur match {
      case CoolTokens.NATIVE() => yynext; ()
      case _ => throw new YYError("Expected 'NATIVE'");
    }
  }

  def parse_NEW() : Unit = {
    yycur match {
      case CoolTokens.NEW() => yynext; ()
      case _ => throw new YYError("Expected 'NEW'");
    }
  }

  def parse_NULL() : Unit = {
    yycur match {
      case CoolTokens.NULL() => yynext; ()
      case _ => throw new YYError("Expected 'NULL'");
    }
  }

  def parse_OVERRIDE() : Unit = {
    yycur match {
      case CoolTokens.OVERRIDE() => yynext; ()
      case _ => throw new YYError("Expected 'OVERRIDE'");
    }
  }

  def parse_SUPER() : Unit = {
    yycur match {
      case CoolTokens.SUPER() => yynext; ()
      case _ => throw new YYError("Expected 'SUPER'");
    }
  }

  def parse_THIS() : Unit = {
    yycur match {
      case CoolTokens.THIS() => yynext; ()
      case _ => throw new YYError("Expected 'THIS'");
    }
  }

  def parse_VAR() : Unit = {
    yycur match {
      case CoolTokens.VAR() => yynext; ()
      case _ => throw new YYError("Expected 'VAR'");
    }
  }

  def parse_WHILE() : Unit = {
    yycur match {
      case CoolTokens.WHILE() => yynext; ()
      case _ => throw new YYError("Expected 'WHILE'");
    }
  }

  def parse_STR_LIT() : Symbol = {
    yycur match {
      case CoolTokens.STR_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'STR_LIT'");
    }
  }

  def parse_INT_LIT() : Symbol = {
    yycur match {
      case CoolTokens.INT_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'INT_LIT'");
    }
  }

  def parse_BOOL_LIT() : Boolean = {
    yycur match {
      case CoolTokens.BOOL_LIT(yy) => yynext; yy
      case _ => throw new YYError("Expected 'BOOL_LIT'");
    }
  }

  def parse_TYPEID() : Symbol = {
    yycur match {
      case CoolTokens.TYPEID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'TYPEID'");
    }
  }

  def parse_OBJECTID() : Symbol = {
    yycur match {
      case CoolTokens.OBJECTID(yy) => yynext; yy
      case _ => throw new YYError("Expected 'OBJECTID'");
    }
  }

  def parse_EQEQ() : Unit = {
    yycur match {
      case CoolTokens.EQEQ() => yynext; ()
      case _ => throw new YYError("Expected 'EQEQ'");
    }
  }

  def parse_LE() : Unit = {
    yycur match {
      case CoolTokens.LE() => yynext; ()
      case _ => throw new YYError("Expected 'LE'");
    }
  }

  def parse_ARROW() : Unit = {
    yycur match {
      case CoolTokens.ARROW() => yynext; ()
      case _ => throw new YYError("Expected 'ARROW'");
    }
  }

  def parse_ERROR() : String = {
    yycur match {
      case CoolTokens.ERROR(yy) => yynext; yy
      case _ => throw new YYError("Expected 'ERROR'");
    }
  }

  def parse_UNARY() : Unit = {
    yycur match {
      case CoolTokens.UNARY() => yynext; ()
      case _ => throw new YYError("Expected 'UNARY'");
    }
  }

  def parse_simple_cases() : Cases = {
    yystate212();
    yynt match {
      case YYNTsimple_cases(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_class_list() : Classes = {
    yystate2();
    yynt match {
      case YYNTclass_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_var_formals() : Formals = {
    yystate8();
    yynt match {
      case YYNTvar_formals(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_class_decl() : Class = {
    yystate6();
    yynt match {
      case YYNTclass_decl(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_formal() : Formal = {
    yystate112();
    yynt match {
      case YYNTformal(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_var_init() : Expression = {
    yystate156();
    yynt match {
      case YYNTvar_init(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_program() : Unit = {
    yystate0();
    yynt match {
      case YYNTprogram() => ()
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_no_comma1a() : Unit = {
    yystate106();
    yynt match {
      case YYNTno_comma1a() => ()
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_feature_list() : Features = {
    yystate20();
    yynt match {
      case YYNTfeature_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_stmt_list() : Expressions = {
    yystate120();
    yynt match {
      case YYNTstmt_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_istmt_list() : Expressions = {
    yystate158();
    yynt match {
      case YYNTistmt_list(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_var_formal() : Formal = {
    yystate104();
    yynt match {
      case YYNTvar_formal(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_actuals() : Expressions = {
    yystate110();
    yynt match {
      case YYNTactuals(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_block() : Expression = {
    yystate116();
    yynt match {
      case YYNTblock(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_var1() : Unit = {
    yystate108();
    yynt match {
      case YYNTvar1() => ()
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_no_comma2a() : Unit = {
    yystate114();
    yynt match {
      case YYNTno_comma2a() => ()
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_expr() : Expression = {
    yystate118();
    yynt match {
      case YYNTexpr(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_simple_case() : Case = {
    yystate214();
    yynt match {
      case YYNTsimple_case(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_no_comma3a() : Unit = {
    yystate210();
    yynt match {
      case YYNTno_comma3a() => ()
      case YYNTerror(s) => throw new YYError(s)
    }
  }

  def parse_superclass() : Symbol = {
    yystate16();
    yynt match {
      case YYNTsuperclass(yy) => yy
      case YYNTerror(s) => throw new YYError(s)
    }
  }


  /** Recursive descent parser after recognition point
   * program: . class_list
   */
  private def yyrule1() : Unit = {
    val yyarg1 : Classes = parse_class_list();
    { result = result.concat(yyarg1); }
  }

  /** Recursive descent parser after recognition point
   * class_list: . class_decl
   */
  private def yyrule2() : Classes = {
    var yyresult : Classes = null;
    val yyarg1 : Class = parse_class_decl();
    { yyresult = new Classes_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: class_list . class_decl
   */
  private def yyrule3(yyarg1 : Classes) : Classes = {
    var yyresult : Classes = null;
    val yyarg2 : Class = parse_class_decl();
    { yyresult = yyarg1.addcopy(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: class_list . ';'
   */
  private def yyrule4(yyarg1 : Classes) : Classes = {
    var yyresult : Classes = null;
    parse_YYCHAR(';');
    { yyresult = yyarg1; 
		  yyerror("deleted semicolon after class declaration"); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: error .
   */
  private def yyrule5() : Classes = {
    var yyresult : Classes = null;
    { yyresult = new Classes_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_list: class_list error .
   */
  private def yyrule6(yyarg1 : Classes) : Classes = {
    var yyresult : Classes = null;
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * class_decl: . CLASS TYPEID var_formals superclass '{' feature_list '}'
   */
  private def yyrule7() : Class = {
    var yyresult : Class = null;
    parse_CLASS();
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Formals = parse_var_formals();
    val yyarg4 : Symbol = parse_superclass();
    parse_YYCHAR('{');
    val yyarg6 : Features = parse_feature_list();
    parse_YYCHAR('}');
    { yyresult = class_decl(yyarg2,yyarg4,
				  make_constructor(yyarg2,yyarg3).concat(yyarg6),
				  symbol(filename)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formals: '(' no_comma1b . ')'
   */
  private def yyrule8() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = new Formals_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formals: '(' no_comma1b var_formal_list no_comma1 . ')'
   */
  private def yyrule9(yyarg3 : Formals) : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formals: '(' error . ')'
   */
  private def yyrule10() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = new Formals_nil();  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formals: .
   */
  private def yyrule11() : Formals = {
    var yyresult : Formals = null;
    { yyerror("Need var formals for class declaration"); 
		  yyresult = new Formals_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formal_list: . var_formal
   */
  private def yyrule12() : Formals = {
    var yyresult : Formals = null;
    val yyarg1 : Formal = parse_var_formal();
    { yyresult = new Formals_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formal_list: var_formal_list ',' . no_comma1a var_formal
   */
  private def yyrule13(yyarg1 : Formals) : Formals = {
    var yyresult : Formals = null;
    parse_no_comma1a();
    val yyarg4 : Formal = parse_var_formal();
    { yyresult = yyarg1.addcopy(yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_formal: . var1 OBJECTID ':' TYPEID
   */
  private def yyrule14() : Formal = {
    var yyresult : Formal = null;
    parse_var1();
    val yyarg2 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg4 : Symbol = parse_TYPEID();
    { yyresult = attr_parameter(yyarg2,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var1: . VAR
   */
  private def yyrule15() : Unit = {
    parse_VAR();
  }

  /** Recursive descent parser after recognition point
   * var1: .
   */
  private def yyrule16() : Unit = {
    { yyerror("expected 'VAR' in class formals") }
  }

  /** Recursive descent parser after recognition point
   * var2: . VAR
   */
  private def yyrule17() : Unit = {
    parse_VAR();
  }

  /** Recursive descent parser after recognition point
   * var2: .
   */
  private def yyrule18() : Unit = {
    { yyerror("expected 'VAR' for attribute") }
  }

  /** Recursive descent parser after recognition point
   * superclass: .
   */
  private def yyrule19() : Symbol = {
    var yyresult : Symbol = null;
    { superclass_name = symbol("Any"); 
                  yyresult = superclass_name;
                  add_supercall(superclass_name,new Expressions_nil()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: EXTENDS TYPEID . actuals
   */
  private def yyrule20(yyarg2 : Symbol) : Symbol = {
    var yyresult : Symbol = null;
    val yyarg3 : Expressions = parse_actuals();
    { superclass_name = yyarg2; 
		  if (superclass_name == symbol("Any")) {
		    yyerror("Cannot explicitly extend 'Any'");
		  } else {};
		  yyresult = superclass_name;
		  add_supercall(yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: EXTENDS TYPEID .
   */
  private def yyrule21(yyarg2 : Symbol) : Symbol = {
    var yyresult : Symbol = null;
    { superclass_name = yyarg2; 
		  yyresult = superclass_name;
		  yyerror("Need actuals in class extension"); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * superclass: EXTENDS . NATIVE
   */
  private def yyrule22() : Symbol = {
    var yyresult : Symbol = null;
    parse_NATIVE();
    { superclass_name = Symbol("native"); 
		  yyresult = superclass_name;
		  native_constructor(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: .
   */
  private def yyrule23() : Features = {
    var yyresult : Features = null;
    {  yyresult = new Features_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list feature . ';'
   */
  private def yyrule24(yyarg1 : Features, yyarg2 : Feature) : Features = {
    var yyresult : Features = null;
    parse_YYCHAR(';');
    {  yyresult = yyarg1.addcopy(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list error . ';'
   */
  private def yyrule25(yyarg1 : Features) : Features = {
    var yyresult : Features = null;
    parse_YYCHAR(';');
    {  yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list feature .
   */
  private def yyrule26(yyarg1 : Features, yyarg2 : Feature) : Features = {
    var yyresult : Features = null;
    {  yyerror("inserted semicolon"); yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list '{' block '}' . ';'
   */
  private def yyrule27(yyarg1 : Features, yyarg3 : Expression) : Features = {
    var yyresult : Features = null;
    parse_YYCHAR(';');
    { add_to_constructor(yyarg3);
		  yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature_list: feature_list '{' block '}' .
   */
  private def yyrule28(yyarg1 : Features, yyarg3 : Expression) : Features = {
    var yyresult : Features = null;
    { yyerror("need semicolon after initialization block");
		  add_to_constructor(yyarg3);
		  yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: opt_override DEF OBJECTID formals ':' TYPEID '=' expr .
   */
  private def yyrule29(yyarg1 : Boolean, yyarg3 : Symbol, yyarg4 : Formals, yyarg6 : Symbol, yyarg8 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyresult = method(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: opt_override DEF OBJECTID formals ':' TYPEID '=' NATIVE .
   */
  private def yyrule30(yyarg1 : Boolean, yyarg3 : Symbol, yyarg4 : Formals, yyarg6 : Symbol) : Feature = {
    var yyresult : Feature = null;
    { yyresult = method(yyarg1,yyarg3,yyarg4,yyarg6,no_expr()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: var2 OBJECTID ':' TYPEID '=' expr .
   */
  private def yyrule31(yyarg2 : Symbol, yyarg4 : Symbol, yyarg6 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyresult = attr(yyarg2,yyarg4);
		  add_to_constructor(attr_init(yyarg2,yyarg6)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: var2 OBJECTID '=' NATIVE .
   */
  private def yyrule32(yyarg2 : Symbol) : Feature = {
    var yyresult : Feature = null;
    { yyresult = attr(yyarg2,symbol("Any"));
		  /* if you have a native field, you cannot be inherited */
		  current_inherit_status = false; 
		  /* and your constructor is native */
		  native_constructor();
		}
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: opt_override DEF OBJECTID formals '=' expr .
   */
  private def yyrule33(yyarg1 : Boolean, yyarg3 : Symbol, yyarg4 : Formals, yyarg6 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyresult = method(yyarg1,yyarg3,yyarg4,symbol("Unit"),yyarg6); 
		  yyerror("Missing return type for method"); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: var2 OBJECTID '=' expr .
   */
  private def yyrule34(yyarg2 : Symbol, yyarg4 : Expression) : Feature = {
    var yyresult : Feature = null;
    { yyerror("Attribute type cannot be inferred"); 
                  yyresult = attr(yyarg2,symbol("ignore")); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: var2 OBJECTID ':' TYPEID .
   */
  private def yyrule35(yyarg2 : Symbol, yyarg4 : Symbol) : Feature = {
    var yyresult : Feature = null;
    { yyerror("Attributes must be initialized"); 
                  yyresult = attr(yyarg2,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * feature: . class_decl
   */
  private def yyrule36() : Feature = {
    var yyresult : Feature = null;
    val yyarg1 : Class = parse_class_decl();
    { yyerror("classes may not be nested");
		  yyresult = attr(symbol("ignore"),symbol("ignore")); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * opt_override: . OVERRIDE
   */
  private def yyrule37() : Boolean = {
    var yyresult : Boolean = false;
    parse_OVERRIDE();
    { yyresult = true; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * opt_override: .
   */
  private def yyrule38() : Boolean = {
    var yyresult : Boolean = false;
    { yyresult = false; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' no_comma2b . ')'
   */
  private def yyrule39() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = new Formals_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' no_comma2b formal_list no_comma2 . ')'
   */
  private def yyrule40(yyarg3 : Formals) : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formals: '(' error . ')'
   */
  private def yyrule41() : Formals = {
    var yyresult : Formals = null;
    parse_YYCHAR(')');
    { yyresult = new Formals_nil();  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal_list: . formal
   */
  private def yyrule42() : Formals = {
    var yyresult : Formals = null;
    val yyarg1 : Formal = parse_formal();
    { yyresult = new Formals_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal_list: formal_list ',' . no_comma2a formal
   */
  private def yyrule43(yyarg1 : Formals) : Formals = {
    var yyresult : Formals = null;
    parse_no_comma2a();
    val yyarg4 : Formal = parse_formal();
    { yyresult = yyarg1.addcopy(yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal: . OBJECTID ':' TYPEID
   */
  private def yyrule44() : Formal = {
    var yyresult : Formal = null;
    val yyarg1 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg3 : Symbol = parse_TYPEID();
    { yyresult = formal(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * formal: . VAR OBJECTID ':' TYPEID
   */
  private def yyrule45() : Formal = {
    var yyresult : Formal = null;
    parse_VAR();
    val yyarg2 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg4 : Symbol = parse_TYPEID();
    { yyresult = formal(yyarg2,yyarg4);
		  yyerror("Method formals must not be 'var'"); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID '=' expr .
   */
  private def yyrule46(yyarg1 : Symbol, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = assign(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: SUPER '.' OBJECTID actuals .
   */
  private def yyrule47(yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { val this_obj : Expression = variable(symbol("this"));
	    yyresult = static_dispatch(this_obj,superclass_name,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '.' OBJECTID actuals .
   */
  private def yyrule48(yyarg1 : Expression, yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { yyresult = dispatch(yyarg1,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: IF '(' expr ')' expr ELSE expr .
   */
  private def yyrule49(yyarg3 : Expression, yyarg5 : Expression, yyarg7 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = cond(yyarg3,yyarg5,yyarg7); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: IF '(' expr ')' expr .
   */
  private def yyrule50(yyarg3 : Expression, yyarg5 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyerror("Missing 'else'");
	    yyresult = cond(yyarg3,yyarg5,unit()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: WHILE '(' expr ')' expr .
   */
  private def yyrule51(yyarg3 : Expression, yyarg5 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = loop(yyarg3,yyarg5); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . '{' block '}'
   */
  private def yyrule52() : Expression = {
    var yyresult : Expression = null;
    parse_YYCHAR('{');
    val yyarg2 : Expression = parse_block();
    parse_YYCHAR('}');
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr MATCH '{' case_list '}' .
   */
  private def yyrule53(yyarg1 : Expression, yyarg4 : Cases) : Expression = {
    var yyresult : Expression = null;
    { yyresult = typecase(yyarg1,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . NEW TYPEID actuals
   */
  private def yyrule54() : Expression = {
    var yyresult : Expression = null;
    parse_NEW();
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Expressions = parse_actuals();
    { yyresult = dispatch(alloc(yyarg2),yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '+' expr .
   */
  private def yyrule55(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = add(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '-' expr .
   */
  private def yyrule56(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = sub(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '*' expr .
   */
  private def yyrule57(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = mul(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '/' expr .
   */
  private def yyrule58(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = div(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '-' expr .
   */
  private def yyrule59(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = neg(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr '<' expr .
   */
  private def yyrule60(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = lt(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr EQEQ expr .
   */
  private def yyrule61(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = eq(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: expr LE expr .
   */
  private def yyrule62(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = leq(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '!' expr .
   */
  private def yyrule63(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = comp(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '(' . expr ')'
   */
  private def yyrule64() : Expression = {
    var yyresult : Expression = null;
    val yyarg2 : Expression = parse_expr();
    parse_YYCHAR(')');
    { yyresult = paren(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: '(' . ')'
   */
  private def yyrule65() : Expression = {
    var yyresult : Expression = null;
    parse_YYCHAR(')');
    { yyresult = unit(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . NULL
   */
  private def yyrule66() : Expression = {
    var yyresult : Expression = null;
    parse_NULL();
    { yyresult = nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . INT_LIT
   */
  private def yyrule67() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_INT_LIT();
    { yyresult = int_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . STR_LIT
   */
  private def yyrule68() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_STR_LIT();
    { yyresult = string_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . BOOL_LIT
   */
  private def yyrule69() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Boolean = parse_BOOL_LIT();
    { yyresult = bool_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: . THIS
   */
  private def yyrule70() : Expression = {
    var yyresult : Expression = null;
    parse_THIS();
    { yyresult = variable(symbol("this")); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID .
   */
  private def yyrule71(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    { yyresult = variable(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * expr: OBJECTID . actuals
   */
  private def yyrule72(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    val yyarg2 : Expressions = parse_actuals();
    { 
	    yyresult = implicit_dispatch(variable(symbol("this")),yyarg1,yyarg2); 
	  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: OBJECTID '=' expr .
   */
  private def yyrule73(yyarg1 : Symbol, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = assign(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: SUPER '.' OBJECTID actuals .
   */
  private def yyrule74(yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { val this_obj : Expression = variable(symbol("this"));
	    yyresult = static_dispatch(this_obj,superclass_name,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '.' OBJECTID actuals .
   */
  private def yyrule75(yyarg1 : Expression, yyarg3 : Symbol, yyarg4 : Expressions) : Expression = {
    var yyresult : Expression = null;
    { yyresult = dispatch(yyarg1,yyarg3,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: IF '(' expr ')' expr ELSE expr .
   */
  private def yyrule76(yyarg3 : Expression, yyarg5 : Expression, yyarg7 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = cond(yyarg3,yyarg5,yyarg7); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: IF '(' expr ')' expr .
   */
  private def yyrule77(yyarg3 : Expression, yyarg5 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyerror("Missing 'else'");
	    yyresult = cond(yyarg3,yyarg5,unit()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: WHILE '(' expr ')' expr .
   */
  private def yyrule78(yyarg3 : Expression, yyarg5 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = loop(yyarg3,yyarg5); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . '{' block '}'
   */
  private def yyrule79() : Expression = {
    var yyresult : Expression = null;
    parse_YYCHAR('{');
    val yyarg2 : Expression = parse_block();
    parse_YYCHAR('}');
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr MATCH '{' case_list '}' .
   */
  private def yyrule80(yyarg1 : Expression, yyarg4 : Cases) : Expression = {
    var yyresult : Expression = null;
    { yyresult = typecase(yyarg1,yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . NEW TYPEID actuals
   */
  private def yyrule81() : Expression = {
    var yyresult : Expression = null;
    parse_NEW();
    val yyarg2 : Symbol = parse_TYPEID();
    val yyarg3 : Expressions = parse_actuals();
    { yyresult = dispatch(alloc(yyarg2),yyarg2,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '+' expr .
   */
  private def yyrule82(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = add(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '-' expr .
   */
  private def yyrule83(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = sub(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '*' expr .
   */
  private def yyrule84(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = mul(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '/' expr .
   */
  private def yyrule85(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = div(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr '<' expr .
   */
  private def yyrule86(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = lt(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr EQEQ expr .
   */
  private def yyrule87(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = dispatch(yyarg1,symbol("equals"),new Expressions_one(yyarg3)); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: iexpr LE expr .
   */
  private def yyrule88(yyarg1 : Expression, yyarg3 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = leq(yyarg1,yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: '!' expr .
   */
  private def yyrule89(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = comp(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . NULL
   */
  private def yyrule90() : Expression = {
    var yyresult : Expression = null;
    parse_NULL();
    { yyresult = nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . INT_LIT
   */
  private def yyrule91() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_INT_LIT();
    { yyresult = int_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . STR_LIT
   */
  private def yyrule92() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Symbol = parse_STR_LIT();
    { yyresult = string_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . BOOL_LIT
   */
  private def yyrule93() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Boolean = parse_BOOL_LIT();
    { yyresult = bool_lit(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: . THIS
   */
  private def yyrule94() : Expression = {
    var yyresult : Expression = null;
    parse_THIS();
    { yyresult = variable(symbol("this")); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: OBJECTID .
   */
  private def yyrule95(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    { yyresult = variable(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * iexpr: OBJECTID . actuals
   */
  private def yyrule96(yyarg1 : Symbol) : Expression = {
    var yyresult : Expression = null;
    val yyarg2 : Expressions = parse_actuals();
    { 
	    yyresult = dispatch(variable(symbol("this")),yyarg1,yyarg2); 
	  }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * cexpr: .
   */
  private def yyrule97() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '=' expr .
   */
  private def yyrule98(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '.' OBJECTID actuals .
   */
  private def yyrule99(yyarg2 : Symbol, yyarg3 : Expressions) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: . actuals
   */
  private def yyrule100() : Unit = {
    val yyarg1 : Expressions = parse_actuals();
  }

  /** Recursive descent parser after recognition point
   * cexpr: . ELSE expr
   */
  private def yyrule101() : Unit = {
    parse_ELSE();
    val yyarg2 : Expression = parse_expr();
  }

  /** Recursive descent parser after recognition point
   * cexpr: . '{' stmt_list '}'
   */
  private def yyrule102() : Unit = {
    parse_YYCHAR('{');
    val yyarg2 : Expressions = parse_stmt_list();
    parse_YYCHAR('}');
  }

  /** Recursive descent parser after recognition point
   * cexpr: MATCH '{' case_list '}' .
   */
  private def yyrule103(yyarg3 : Cases) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '+' expr .
   */
  private def yyrule104(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '-' expr .
   */
  private def yyrule105(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '*' expr .
   */
  private def yyrule106(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '/' expr .
   */
  private def yyrule107(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: '<' expr .
   */
  private def yyrule108(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: EQEQ expr .
   */
  private def yyrule109(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * cexpr: LE expr .
   */
  private def yyrule110(yyarg2 : Expression) : Unit = {
  }

  /** Recursive descent parser after recognition point
   * block: .
   */
  private def yyrule111() : Expression = {
    var yyresult : Expression = null;
    { yyresult = block(new Expressions_nil()); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * block: . stmt_list
   */
  private def yyrule112() : Expression = {
    var yyresult : Expression = null;
    val yyarg1 : Expressions = parse_stmt_list();
    { yyresult = block(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr ';' .
   */
  private def yyrule113(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("deleted semicolon");
	    yyresult = new Expressions_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr .
   */
  private def yyrule114(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = new Expressions_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr ';' . stmt_list
   */
  private def yyrule115(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    val yyarg3 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(yyarg1).concat(yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: VAR OBJECTID var_type var_init . ';' stmt_list
   */
  private def yyrule116(yyarg2 : Symbol, yyarg3 : Symbol, yyarg4 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(';');
    val yyarg6 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(let(yyarg2,yyarg3,yyarg4,block(yyarg6))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: VAR OBJECTID var_type var_init .
   */
  private def yyrule117(yyarg2 : Symbol, yyarg3 : Symbol, yyarg4 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("local variable cannot be last in a block");
	    yyresult = new Expressions_one(let(yyarg2,yyarg3,yyarg4,unit())); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: OBJECTID . ':' TYPEID @1 var_init ';' stmt_list
   */
  private def yyrule119(yyarg1 : Symbol) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(':');
    val yyarg3 : Symbol = parse_TYPEID();
    { yyerror("local variables must be declared 'var'"); }
    val yyarg5 : Expression = parse_var_init();
    parse_YYCHAR(';');
    val yyarg7 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(let(yyarg1,yyarg3,yyarg5,block(yyarg7))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: error cexpr . ';' stmt_list
   */
  private def yyrule120() : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(';');
    val yyarg4 : Expressions = parse_stmt_list();
    { yyresult = yyarg4; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: error cexpr .
   */
  private def yyrule121() : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = new Expressions_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * stmt_list: expr . @2 istmt_list
   */
  private def yyrule123(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("Missing semicolon in block"); }
    val yyarg3 : Expressions = parse_istmt_list();
    { yyresult = new Expressions_one(yyarg1).concat(yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: iexpr ';' .
   */
  private def yyrule124(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("deleted semicolon");
	    yyresult = new Expressions_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: iexpr .
   */
  private def yyrule125(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = new Expressions_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: iexpr ';' . stmt_list
   */
  private def yyrule126(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    val yyarg3 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(yyarg1).concat(yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: VAR OBJECTID var_type var_init . ';' stmt_list
   */
  private def yyrule127(yyarg2 : Symbol, yyarg3 : Symbol, yyarg4 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(';');
    val yyarg6 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(let(yyarg2,yyarg3,yyarg4,block(yyarg6))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: VAR OBJECTID var_type var_init .
   */
  private def yyrule128(yyarg2 : Symbol, yyarg3 : Symbol, yyarg4 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("local variable cannot be last in a block");
	    yyresult = new Expressions_one(let(yyarg2,yyarg3,yyarg4,unit())); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: iexpr . @3 istmt_list
   */
  private def yyrule130(yyarg1 : Expression) : Expressions = {
    var yyresult : Expressions = null;
    { yyerror("Missing semicolon in block"); }
    val yyarg3 : Expressions = parse_istmt_list();
    { yyresult = new Expressions_one(yyarg1).concat(yyarg3); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: OBJECTID . ':' TYPEID @4 var_init ';' stmt_list
   */
  private def yyrule132(yyarg1 : Symbol) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(':');
    val yyarg3 : Symbol = parse_TYPEID();
    { yyerror("local variables must be declared 'var'"); }
    val yyarg5 : Expression = parse_var_init();
    parse_YYCHAR(';');
    val yyarg7 : Expressions = parse_stmt_list();
    { yyresult = new Expressions_one(let(yyarg1,yyarg3,yyarg5,block(yyarg7))); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: error cexpr .
   */
  private def yyrule133() : Expressions = {
    var yyresult : Expressions = null;
    { yyresult = new Expressions_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * istmt_list: error cexpr . ';' stmt_list
   */
  private def yyrule134() : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(';');
    val yyarg4 : Expressions = parse_stmt_list();
    { yyresult = yyarg4; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_type: . ':' TYPEID
   */
  private def yyrule135() : Symbol = {
    var yyresult : Symbol = null;
    parse_YYCHAR(':');
    val yyarg2 : Symbol = parse_TYPEID();
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_type: .
   */
  private def yyrule136() : Symbol = {
    var yyresult : Symbol = null;
    { yyerror("local variable must be typed");
		  yyresult = symbol("Any"); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_init: '=' expr .
   */
  private def yyrule137(yyarg2 : Expression) : Expression = {
    var yyresult : Expression = null;
    { yyresult = yyarg2; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * var_init: .
   */
  private def yyrule138() : Expression = {
    var yyresult : Expression = null;
    { yyerror("local variable must be initialized");
		  yyresult = no_expr(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * actuals: '(' no_comma3b . ')'
   */
  private def yyrule139() : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(')');
    {  yyresult = new Expressions_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * actuals: '(' no_comma3b exp_list no_comma3 . ')'
   */
  private def yyrule140(yyarg3 : Expressions) : Expressions = {
    var yyresult : Expressions = null;
    parse_YYCHAR(')');
    {  yyresult = yyarg3; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp_list: . expr
   */
  private def yyrule141() : Expressions = {
    var yyresult : Expressions = null;
    val yyarg1 : Expression = parse_expr();
    { yyresult = new Expressions_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * exp_list: exp_list ',' . no_comma3a expr
   */
  private def yyrule142(yyarg1 : Expressions) : Expressions = {
    var yyresult : Expressions = null;
    parse_no_comma3a();
    val yyarg4 : Expression = parse_expr();
    { yyresult = yyarg1.addcopy(yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * case_list: . simple_cases
   */
  private def yyrule143() : Cases = {
    var yyresult : Cases = null;
    val yyarg1 : Cases = parse_simple_cases();
    { yyresult = yyarg1; }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * case_list: .
   */
  private def yyrule144() : Cases = {
    var yyresult : Cases = null;
    { yyerror("Missing cases"); yyresult = new Cases_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * case_list: error . ARROW block
   */
  private def yyrule145() : Cases = {
    var yyresult : Cases = null;
    parse_ARROW();
    val yyarg3 : Expression = parse_block();
    { yyresult = new Cases_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * case_list: error . block
   */
  private def yyrule146() : Cases = {
    var yyresult : Cases = null;
    val yyarg2 : Expression = parse_block();
    { yyresult = new Cases_nil(); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_cases: . simple_case
   */
  private def yyrule147() : Cases = {
    var yyresult : Cases = null;
    val yyarg1 : Case = parse_simple_case();
    { yyresult = new Cases_one(yyarg1); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_cases: simple_cases . simple_case
   */
  private def yyrule148(yyarg1 : Cases) : Cases = {
    var yyresult : Cases = null;
    val yyarg2 : Case = parse_simple_case();
    { yyresult = yyarg1.addcopy(yyarg2); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_case: CASE . OBJECTID ':' TYPEID ARROW block
   */
  private def yyrule149() : Case = {
    var yyresult : Case = null;
    val yyarg2 : Symbol = parse_OBJECTID();
    parse_YYCHAR(':');
    val yyarg4 : Symbol = parse_TYPEID();
    parse_ARROW();
    val yyarg6 : Expression = parse_block();
    { yyresult = branch(yyarg2,yyarg4,yyarg6); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * simple_case: CASE . NULL ARROW block
   */
  private def yyrule150() : Case = {
    var yyresult : Case = null;
    parse_NULL();
    parse_ARROW();
    val yyarg4 : Expression = parse_block();
    { yyresult = branch(symbol("null"),symbol("Null"),yyarg4); }
    yyresult
  }

  /** Recursive descent parser after recognition point
   * no_comma1: .
   */
  private def yyrule151() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma1: ',' .
   */
  private def yyrule152() : Unit = {
    { yyerror("deleted extraneous comma after var formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma2: .
   */
  private def yyrule153() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma2: ',' .
   */
  private def yyrule154() : Unit = {
    { yyerror("deleted extraneous comma after formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma3: .
   */
  private def yyrule155() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma3: ',' .
   */
  private def yyrule156() : Unit = {
    { yyerror("deleted extraneous comma after actuals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma1a: .
   */
  private def yyrule157() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma1a: . ','
   */
  private def yyrule158() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma in var formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma2a: .
   */
  private def yyrule159() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma2a: . ','
   */
  private def yyrule160() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma in formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma3a: .
   */
  private def yyrule161() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma3a: . ','
   */
  private def yyrule162() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma in actuals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma1b: .
   */
  private def yyrule163() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma1b: . ','
   */
  private def yyrule164() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma before var formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma2b: .
   */
  private def yyrule165() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma2b: . ','
   */
  private def yyrule166() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma before formals"); }
  }

  /** Recursive descent parser after recognition point
   * no_comma3b: .
   */
  private def yyrule167() : Unit = {
  }

  /** Recursive descent parser after recognition point
   * no_comma3b: . ','
   */
  private def yyrule168() : Unit = {
    parse_YYCHAR(',');
    { yyerror("deleted extraneous comma before actuals"); }
  }

  private def yystate213(yyarg1: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTsimple_cases(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTsimple_cases(yyrule148(yyarg1)); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsimple_cases => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate212() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yynt = YYNTsimple_cases(yyrule147()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTsimple_cases(yyarg1) => yygoto = yystate213(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate5() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTclass_list(yyrule5()); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate4(yyarg1: Classes) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTclass_list(yyrule6(yyarg1)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate3(yyarg1: Classes) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yynt = YYNTclass_list(yyrule3(yyarg1)); yygoto = 1
      case CoolTokens.YYEOF() => yynt = YYNTclass_list(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(';') => yynt = YYNTclass_list(yyrule4(yyarg1)); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYEOF() => true
            case CoolTokens.CLASS() => true
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate4(yyarg1);
        case _:YYNTclass_list => return 0;
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate2() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yynt = YYNTclass_list(yyrule2()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYEOF() => true
            case CoolTokens.CLASS() => true
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate5();
        case YYNTclass_list(yyarg1) => yygoto = yystate3(yyarg1);
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate10() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTvar_formals(yyrule10()); yygoto = 2
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate13(yyarg1: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yyrule152(); yynt = YYNTno_comma1(); yygoto = 1
      case CoolTokens.YYCHAR(',') => yynt = YYNTvar_formal_list(yyrule13(yyarg1)); yygoto = 2
      case _ => yynt = YYNTvar_formal_list(yyrule13(yyarg1)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate14(yyarg3: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTvar_formals(yyrule9(yyarg3)); yygoto = 4
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate12(yyarg3: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yynext; yygoto = yystate13(yyarg3);
      case _ => yyrule151(); yynt = YYNTno_comma1(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma1() => yygoto = yystate14(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate11() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTvar_formals(yyrule8()); yygoto = 2
      case CoolTokens.VAR() => yynt = YYNTvar_formal_list(yyrule12()); yygoto = 0
      case _ => yynt = YYNTvar_formal_list(yyrule12()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_formal_list(yyarg3) => yygoto = yystate12(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate9() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.OBJECTID(_) => yyrule163(); yynt = YYNTno_comma1b(); yygoto = 0
      case CoolTokens.YYCHAR(')') => yyrule163(); yynt = YYNTno_comma1b(); yygoto = 0
      case CoolTokens.VAR() => yyrule163(); yynt = YYNTno_comma1b(); yygoto = 0
      case CoolTokens.YYCHAR(',') => yyrule164(); yynt = YYNTno_comma1b(); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(')') => true
            case _ => false
          }})
          yygoto = yystate10();
        case YYNTno_comma1b() => yygoto = yystate11();
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate15(yyarg1: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EXTENDS() => yynt = YYNTvar_formals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('{') => yynt = YYNTvar_formals(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTvar_formals => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate8() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EXTENDS() => yynt = YYNTvar_formals(yyrule11()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTvar_formals(yyrule11()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate9();
      case _ => yynt = YYNTvar_formals(yyrule11()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_formals(yyarg1) => yygoto = yystate15(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate7(yyarg1: Class) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CLASS() => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.OVERRIDE() => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('}') => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.YYEOF() => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('{') => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.OBJECTID(_) => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.VAR() => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.DEF() => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(';') => yynt = YYNTclass_decl(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTclass_decl => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate6() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CLASS() => yynt = YYNTclass_decl(yyrule7()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTclass_decl(yyarg1) => yygoto = yystate7(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate113(yyarg1: Formal) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTformal(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(',') => yynt = YYNTformal(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTformal => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate112() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTformal(yyrule44()); yygoto = 0
      case CoolTokens.VAR() => yynt = YYNTformal(yyrule45()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTformal(yyarg1) => yygoto = yystate113(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate30() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.YYCHAR('(') => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.YYCHAR(')') => yynt = YYNTexpr(yyrule65()); yygoto = 1
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.OBJECTID(_) => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.YYCHAR('-') => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.WHILE() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.YYCHAR('!') => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.SUPER() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case CoolTokens.IF() => yynt = YYNTexpr(yyrule64()); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate45(yyarg1: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yyrule156(); yynt = YYNTno_comma3(); yygoto = 1
      case CoolTokens.YYCHAR(',') => yynt = YYNTexp_list(yyrule142(yyarg1)); yygoto = 2
      case _ => yynt = YYNTexp_list(yyrule142(yyarg1)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate46(yyarg3: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTactuals(yyrule140(yyarg3)); yygoto = 4
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate44(yyarg3: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yynext; yygoto = yystate45(yyarg3);
      case _ => yyrule155(); yynt = YYNTno_comma3(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma3() => yygoto = yystate46(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate43() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.YYCHAR(')') => yynt = YYNTactuals(yyrule139()); yygoto = 2
      case CoolTokens.INT_LIT(_) => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.OBJECTID(_) => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.NULL() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.WHILE() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.THIS() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.SUPER() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.NEW() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case CoolTokens.IF() => yynt = YYNTexp_list(yyrule141()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexp_list(yyarg3) => yygoto = yystate44(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate42() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yyrule168(); yynt = YYNTno_comma3b(); yygoto = 0
      case _ => yyrule167(); yynt = YYNTno_comma3b(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma3b() => yygoto = yystate43();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate47(yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexpr(yyrule47(yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate41(yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate47(yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate40() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate41(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate39() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate40();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate55(yyarg1: Expression, yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexpr(yyrule48(yyarg1,yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate54(yyarg1: Expression, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate55(yyarg1,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate53(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate54(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate52(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case _ => yynt = YYNTexpr(yyrule58(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate51(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate52(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate57(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case _ => yynt = YYNTexpr(yyrule57(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate56(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate57(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate59(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case _ => yynt = YYNTexpr(yyrule56(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate58(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate59(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate61(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case _ => yynt = YYNTexpr(yyrule55(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate60(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate61(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate50(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTexpr(yyrule61(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate49(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate50(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate63(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTexpr(yyrule62(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate62(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate63(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate67(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTexpr(yyrule60(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate66(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate67(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate73(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTexpr(yyrule53(yyarg1,yyarg4)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate72(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynext; yygoto = yystate73(yyarg1,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate74() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.ARROW() => yynt = YYNTcase_list(yyrule145()); yygoto = 1
      case CoolTokens.YYCHAR('}') => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.STR_LIT(_) => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.YYCHAR('{') => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.YYCHAR('(') => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.INT_LIT(_) => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.OBJECTID(_) => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.VAR() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.NULL() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.YYCHAR('-') => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.WHILE() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.THIS() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.YYCHAR('!') => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.SUPER() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.NEW() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case CoolTokens.IF() => yynt = YYNTcase_list(yyrule146()); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate71(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTcase_list(yyrule144()); yygoto = 0
      case CoolTokens.CASE() => yynt = YYNTcase_list(yyrule143()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTcase_list(yyarg4) => yygoto = yystate72(yyarg1,yyarg4);
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.WHILE() => true
            case CoolTokens.VAR() => true
            case CoolTokens.NULL() => true
            case CoolTokens.STR_LIT(_) => true
            case CoolTokens.NEW() => true
            case CoolTokens.YYCHAR('-') => true
            case CoolTokens.THIS() => true
            case CoolTokens.YYCHAR('!') => true
            case CoolTokens.YYCHAR('}') => true
            case CoolTokens.OBJECTID(_) => true
            case CoolTokens.YYCHAR('{') => true
            case CoolTokens.YYCHAR('(') => true
            case CoolTokens.SUPER() => true
            case CoolTokens.INT_LIT(_) => true
            case CoolTokens.IF() => true
            case CoolTokens.ARROW() => true
            case CoolTokens.BOOL_LIT(_) => true
            case _ => false
          }})
          yygoto = yystate74();
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate70(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('{') => yynext; yygoto = yystate71(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate69(yyarg3: Expression, yyarg5: Expression, yyarg7: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg7);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg7);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg7);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg7);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg7);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg7);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg7);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg7);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg7);
      case _ => yynt = YYNTexpr(yyrule49(yyarg3,yyarg5,yyarg7)); yygoto = 7
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate68(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg7) => yynext; yygoto = yystate31(yyarg7);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg7) => yygoto = yystate69(yyarg3,yyarg5,yyarg7);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate65(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg5);
      case CoolTokens.ELSE() => yynext; yygoto = yystate68(yyarg3,yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg5);
      case _ => yynt = YYNTexpr(yyrule50(yyarg3,yyarg5)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate64(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate31(yyarg5);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate65(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate48(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate64(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate38() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate48(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate37() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate38();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate75(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case _ => yynt = YYNTexpr(yyrule63(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate36() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate75(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate78(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg5);
      case _ => yynt = YYNTexpr(yyrule51(yyarg3,yyarg5)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate77(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate31(yyarg5);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate78(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate76(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate77(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate35() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate76(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate34() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate35();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate79(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case _ => yynt = YYNTexpr(yyrule59(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate33() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate79(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate80(yyarg1: Symbol, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTexpr(yyrule46(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate32(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate80(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate31(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate32(yyarg1);
      case CoolTokens.YYCHAR('(') => yynt = YYNTexpr(yyrule72(yyarg1)); yygoto = 1
      case _ => yynt = YYNTexpr(yyrule71(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate126(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yynt = YYNTvar_init(yyrule137(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate125() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate126(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate157(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTvar_init(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTvar_init => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate156() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate125();
      case CoolTokens.YYCHAR(';') => yynt = YYNTvar_init(yyrule138()); yygoto = 0
      case _ => yynt = YYNTvar_init(yyrule138()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_init(yyarg1) => yygoto = yystate157(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate1() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYEOF() => yynt = YYNTprogram(); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTprogram => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate0() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CLASS() => yyrule1(); yynt = YYNTprogram(); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTprogram() => yygoto = yystate1();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate107() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTno_comma1a(); yygoto = 2;
      case CoolTokens.VAR() => yynt = YYNTno_comma1a(); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTno_comma1a => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate106() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yyrule157(); yynt = YYNTno_comma1a(); yygoto = 0
      case CoolTokens.VAR() => yyrule157(); yynt = YYNTno_comma1a(); yygoto = 0
      case CoolTokens.YYCHAR(',') => yyrule158(); yynt = YYNTno_comma1a(); yygoto = 0
      case _ => yyrule157(); yynt = YYNTno_comma1a(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma1a() => yygoto = yystate107();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate24(yyarg1: Features, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTfeature_list(yyrule27(yyarg1,yyarg3)); yygoto = 4
      case _ => yynt = YYNTfeature_list(yyrule28(yyarg1,yyarg3)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate23(yyarg1: Features, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynext; yygoto = yystate24(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate22(yyarg1: Features) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTblock(yyrule111()); yygoto = 0
      case CoolTokens.STR_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.INT_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.OBJECTID(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.VAR() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.NULL() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.WHILE() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.THIS() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.SUPER() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.NEW() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.IF() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTblock(yyarg3) => yygoto = yystate23(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate25(yyarg1: Features) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTfeature_list(yyrule25(yyarg1)); yygoto = 2
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate26(yyarg1: Features, yyarg2: Feature) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTfeature_list(yyrule24(yyarg1,yyarg2)); yygoto = 2
      case _ => yynt = YYNTfeature_list(yyrule26(yyarg1,yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate81(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTfeature(yyrule32(yyarg2)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate82(yyarg2: Symbol, yyarg4: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg4);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg4);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg4);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg4);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg4);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg4);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg4);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg4);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg4);
      case _ => yynt = YYNTfeature(yyrule34(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate29(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg4) => yynext; yygoto = yystate31(yyarg4);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case CoolTokens.NATIVE() => yynext; yygoto = yystate81(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg4) => yygoto = yystate82(yyarg2,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate86(yyarg2: Symbol, yyarg4: Symbol, yyarg6: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg6);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg6);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg6);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg6);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg6);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg6);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg6);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg6);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg6);
      case _ => yynt = YYNTfeature(yyrule31(yyarg2,yyarg4,yyarg6)); yygoto = 6
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate85(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg6) => yynext; yygoto = yystate31(yyarg6);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg6) => yygoto = yystate86(yyarg2,yyarg4,yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate84(yyarg2: Symbol, yyarg4: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate85(yyarg2,yyarg4);
      case _ => yynt = YYNTfeature(yyrule35(yyarg2,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate83(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.TYPEID(yyarg4) => yynext; yygoto = yystate84(yyarg2,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate28(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate29(yyarg2);
      case CoolTokens.YYCHAR(':') => yynext; yygoto = yystate83(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate27() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate28(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate91() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTformals(yyrule41()); yygoto = 2
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate94(yyarg1: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yyrule154(); yynt = YYNTno_comma2(); yygoto = 1
      case CoolTokens.YYCHAR(',') => yynt = YYNTformal_list(yyrule43(yyarg1)); yygoto = 2
      case _ => yynt = YYNTformal_list(yyrule43(yyarg1)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate95(yyarg3: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTformals(yyrule40(yyarg3)); yygoto = 4
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate93(yyarg3: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(',') => yynext; yygoto = yystate94(yyarg3);
      case _ => yyrule153(); yynt = YYNTno_comma2(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma2() => yygoto = yystate95(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate92() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTformal_list(yyrule42()); yygoto = 0
      case CoolTokens.YYCHAR(')') => yynt = YYNTformals(yyrule39()); yygoto = 2
      case CoolTokens.VAR() => yynt = YYNTformal_list(yyrule42()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTformal_list(yyarg3) => yygoto = yystate93(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate90() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.OBJECTID(_) => yyrule165(); yynt = YYNTno_comma2b(); yygoto = 0
      case CoolTokens.YYCHAR(')') => yyrule165(); yynt = YYNTno_comma2b(); yygoto = 0
      case CoolTokens.VAR() => yyrule165(); yynt = YYNTno_comma2b(); yygoto = 0
      case CoolTokens.YYCHAR(',') => yyrule166(); yynt = YYNTno_comma2b(); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(')') => true
            case _ => false
          }})
          yygoto = yystate91();
        case YYNTno_comma2b() => yygoto = yystate92();
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate98(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg6);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg6);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg6);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg6);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg6);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg6);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg6);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg6);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg6);
      case _ => yynt = YYNTfeature(yyrule33(yyarg1,yyarg3,yyarg4,yyarg6)); yygoto = 6
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate97(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg6) => yynext; yygoto = yystate31(yyarg6);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg6) => yygoto = yystate98(yyarg1,yyarg3,yyarg4,yyarg6);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate102(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTfeature(yyrule30(yyarg1,yyarg3,yyarg4,yyarg6)); yygoto = 8
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate103(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol, yyarg8: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg8);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg8);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg8);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg8);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg8);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg8);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg8);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg8);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg8);
      case _ => yynt = YYNTfeature(yyrule29(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8)); yygoto = 8
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate101(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg8) => yynext; yygoto = yystate31(yyarg8);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case CoolTokens.NATIVE() => yynext; yygoto = yystate102(yyarg1,yyarg3,yyarg4,yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg8) => yygoto = yystate103(yyarg1,yyarg3,yyarg4,yyarg6,yyarg8);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate100(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals, yyarg6: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate101(yyarg1,yyarg3,yyarg4,yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate99(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.TYPEID(yyarg6) => yynext; yygoto = yystate100(yyarg1,yyarg3,yyarg4,yyarg6);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate96(yyarg1: Boolean, yyarg3: Symbol, yyarg4: Formals) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate97(yyarg1,yyarg3,yyarg4);
      case CoolTokens.YYCHAR(':') => yynext; yygoto = yystate99(yyarg1,yyarg3,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate89(yyarg1: Boolean, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate90();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTformals(yyarg4) => yygoto = yystate96(yyarg1,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate88(yyarg1: Boolean) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate89(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate87(yyarg1: Boolean) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.DEF() => yynext; yygoto = yystate88(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate21(yyarg1: Features) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.CLASS() => yynt = YYNTfeature(yyrule36()); yygoto = 0
      case CoolTokens.OVERRIDE() => yynt = YYNTopt_override(yyrule37()); yygoto = 0
      case CoolTokens.YYCHAR('}') => yynt = YYNTfeature_list(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('{') => yynext; yygoto = yystate22(yyarg1);
      case CoolTokens.OBJECTID(_) => yyrule18(); yynt = YYNTvar2(); yygoto = 0
      case CoolTokens.VAR() => yyrule17(); yynt = YYNTvar2(); yygoto = 0
      case CoolTokens.DEF() => yynt = YYNTopt_override(yyrule38()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.YYCHAR(';') => true
            case _ => false
          }})
          yygoto = yystate25(yyarg1);
        case YYNTfeature(yyarg2) => yygoto = yystate26(yyarg1,yyarg2);
        case YYNTvar2() => yygoto = yystate27();
        case YYNTopt_override(yyarg2) => yygoto = yystate87(yyarg2);
        case _:YYNTfeature_list => return 0;
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate20() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTfeature_list(yyrule23()); yygoto = 0
      case _ => yynt = YYNTfeature_list(yyrule23()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTfeature_list(yyarg1) => yygoto = yystate21(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate121(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate32(yyarg1);
      case CoolTokens.YYCHAR('(') => yynt = YYNTexpr(yyrule72(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR(':') => yynt = YYNTstmt_list(yyrule119(yyarg1)); yygoto = 1
      case _ => yynt = YYNTexpr(yyrule71(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate127(yyarg2: Symbol, yyarg3: Symbol, yyarg4: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTstmt_list(yyrule116(yyarg2,yyarg3,yyarg4)); yygoto = 4
      case _ => yynt = YYNTstmt_list(yyrule117(yyarg2,yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate124(yyarg2: Symbol, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate125();
      case _ => yynt = YYNTvar_init(yyrule138()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_init(yyarg4) => yygoto = yystate127(yyarg2,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate123(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(':') => yynt = YYNTvar_type(yyrule135()); yygoto = 0
      case _ => yynt = YYNTvar_type(yyrule136()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_type(yyarg3) => yygoto = yystate124(yyarg2,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate122() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate123(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate130(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule109(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate129() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate130(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate132(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule107(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate131() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate132(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate134(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule110(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate133() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate134(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate137(yyarg2: Symbol, yyarg3: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yyrule99(yyarg2,yyarg3); yynt = YYNTcexpr(); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate136(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg3) => yygoto = yystate137(yyarg2,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate135() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate136(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate139(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule98(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate138() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate139(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate141(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule106(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate140() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate141(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate143(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule105(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate142() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate143(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate145(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule108(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate144() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate145(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate147(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg2);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg2);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg2);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg2);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg2);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg2);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg2);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg2);
      case _ => yyrule104(yyarg2); yynt = YYNTcexpr(); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate146() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate147(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate151(yyarg3: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yyrule103(yyarg3); yynt = YYNTcexpr(); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate150(yyarg3: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynext; yygoto = yystate151(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate149() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTcase_list(yyrule144()); yygoto = 0
      case CoolTokens.CASE() => yynt = YYNTcase_list(yyrule143()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTcase_list(yyarg3) => yygoto = yystate150(yyarg3);
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.WHILE() => true
            case CoolTokens.VAR() => true
            case CoolTokens.NULL() => true
            case CoolTokens.STR_LIT(_) => true
            case CoolTokens.NEW() => true
            case CoolTokens.YYCHAR('-') => true
            case CoolTokens.THIS() => true
            case CoolTokens.YYCHAR('!') => true
            case CoolTokens.YYCHAR('}') => true
            case CoolTokens.OBJECTID(_) => true
            case CoolTokens.YYCHAR('{') => true
            case CoolTokens.YYCHAR('(') => true
            case CoolTokens.SUPER() => true
            case CoolTokens.INT_LIT(_) => true
            case CoolTokens.IF() => true
            case CoolTokens.ARROW() => true
            case CoolTokens.BOOL_LIT(_) => true
            case _ => false
          }})
          yygoto = yystate74();
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate148() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('{') => yynext; yygoto = yystate149();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate152() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTstmt_list(yyrule120()); yygoto = 2
      case _ => yynt = YYNTstmt_list(yyrule121()); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate128() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate129();
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate131();
      case CoolTokens.LE() => yynext; yygoto = yystate133();
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate135();
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate138();
      case CoolTokens.YYCHAR('{') => yyrule102(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('(') => yyrule100(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate140();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate142();
      case CoolTokens.ELSE() => yyrule101(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate144();
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate146();
      case CoolTokens.MATCH() => yynext; yygoto = yystate148();
      case _ => yyrule97(); yynt = YYNTcexpr(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTcexpr() => yygoto = yystate152();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate153(yyarg1: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTstmt_list(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTstmt_list(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTstmt_list => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate155(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTstmt_list(yyrule113(yyarg1)); yygoto = 2
      case CoolTokens.STR_LIT(_) => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('{') => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('(') => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.INT_LIT(_) => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.OBJECTID(_) => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.VAR() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.NULL() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('-') => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.WHILE() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.THIS() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('!') => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.SUPER() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.NEW() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.IF() => yynt = YYNTstmt_list(yyrule115(yyarg1)); yygoto = 2
      case CoolTokens.CASE() => yynt = YYNTstmt_list(yyrule113(yyarg1)); yygoto = 2
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate154(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg1);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg1);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg1);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg1);
      case CoolTokens.YYCHAR('}') => yynt = YYNTstmt_list(yyrule114(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg1);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg1);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg1);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg1);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg1);
      case CoolTokens.CASE() => yynt = YYNTstmt_list(yyrule114(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR(';') => yynext; yygoto = yystate155(yyarg1);
      case _ => yynt = YYNTstmt_list(yyrule123(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate120() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg1) => yynext; yygoto = yystate121(yyarg1);
      case CoolTokens.VAR() => yynext; yygoto = yystate122();
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.LE() => true
            case CoolTokens.YYCHAR('=') => true
            case CoolTokens.YYCHAR('/') => true
            case CoolTokens.YYCHAR('*') => true
            case CoolTokens.YYCHAR('.') => true
            case CoolTokens.YYCHAR('<') => true
            case CoolTokens.ELSE() => true
            case CoolTokens.YYCHAR('-') => true
            case CoolTokens.YYCHAR(';') => true
            case CoolTokens.YYCHAR('}') => true
            case CoolTokens.EQEQ() => true
            case CoolTokens.YYCHAR('{') => true
            case CoolTokens.MATCH() => true
            case CoolTokens.YYCHAR('(') => true
            case CoolTokens.CASE() => true
            case CoolTokens.YYCHAR('+') => true
            case _ => false
          }})
          yygoto = yystate128();
        case YYNTstmt_list(yyarg1) => yygoto = yystate153(yyarg1);
        case YYNTexpr(yyarg1) => yygoto = yystate154(yyarg1);
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate161(yyarg1: Symbol, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule73(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate160(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate161(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate159(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate160(yyarg1);
      case CoolTokens.YYCHAR('(') => yynt = YYNTiexpr(yyrule96(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR(':') => yynt = YYNTistmt_list(yyrule132(yyarg1)); yygoto = 1
      case _ => yynt = YYNTiexpr(yyrule95(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate165(yyarg2: Symbol, yyarg3: Symbol, yyarg4: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTistmt_list(yyrule127(yyarg2,yyarg3,yyarg4)); yygoto = 4
      case _ => yynt = YYNTistmt_list(yyrule128(yyarg2,yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate164(yyarg2: Symbol, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate125();
      case _ => yynt = YYNTvar_init(yyrule138()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_init(yyarg4) => yygoto = yystate165(yyarg2,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate163(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(':') => yynt = YYNTvar_type(yyrule135()); yygoto = 0
      case _ => yynt = YYNTvar_type(yyrule136()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_type(yyarg3) => yygoto = yystate164(yyarg2,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate162() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate163(yyarg2);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate170(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg5);
      case _ => yynt = YYNTiexpr(yyrule78(yyarg3,yyarg5)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate169(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate31(yyarg5);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate170(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate168(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate169(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate167() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate168(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate166() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate167();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate172(yyarg2: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg2);
      case _ => yynt = YYNTiexpr(yyrule89(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate171() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg2) => yynext; yygoto = yystate31(yyarg2);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg2) => yygoto = yystate172(yyarg2);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate179(yyarg3: Expression, yyarg5: Expression, yyarg7: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg7);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg7);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg7);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg7);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg7);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg7);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg7);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg7);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg7);
      case _ => yynt = YYNTiexpr(yyrule76(yyarg3,yyarg5,yyarg7)); yygoto = 7
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate178(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg7) => yynext; yygoto = yystate31(yyarg7);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg7) => yygoto = yystate179(yyarg3,yyarg5,yyarg7);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate177(yyarg3: Expression, yyarg5: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg5);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg5);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg5);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg5);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg5);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg5);
      case CoolTokens.ELSE() => yynext; yygoto = yystate178(yyarg3,yyarg5);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg5);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg5);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg5);
      case _ => yynt = YYNTiexpr(yyrule77(yyarg3,yyarg5)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate176(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg5) => yynext; yygoto = yystate31(yyarg5);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg5) => yygoto = yystate177(yyarg3,yyarg5);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate175(yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR(')') => yynext; yygoto = yystate176(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg3);
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate174() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate175(yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate173() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate174();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate183(yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTiexpr(yyrule74(yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate182(yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate183(yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate181() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate182(yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate180() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate181();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate185() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(';') => yynt = YYNTistmt_list(yyrule134()); yygoto = 2
      case _ => yynt = YYNTistmt_list(yyrule133()); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate184() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate129();
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate131();
      case CoolTokens.LE() => yynext; yygoto = yystate133();
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate135();
      case CoolTokens.YYCHAR('=') => yynext; yygoto = yystate138();
      case CoolTokens.YYCHAR('{') => yyrule102(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('(') => yyrule100(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate140();
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate142();
      case CoolTokens.ELSE() => yyrule101(); yynt = YYNTcexpr(); yygoto = 0
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate144();
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate146();
      case CoolTokens.MATCH() => yynext; yygoto = yystate148();
      case _ => yyrule97(); yynt = YYNTcexpr(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTcexpr() => yygoto = yystate185();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate186(yyarg1: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTistmt_list(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTistmt_list(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTistmt_list => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate189(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule87(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate188(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate189(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate191(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule85(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate190(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate191(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate196(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule88(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate195(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate196(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate194(yyarg1: Expression, yyarg3: Symbol, yyarg4: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTiexpr(yyrule75(yyarg1,yyarg3,yyarg4)); yygoto = 4
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate193(yyarg1: Expression, yyarg3: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg4) => yygoto = yystate194(yyarg1,yyarg3,yyarg4);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate192(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate193(yyarg1,yyarg3);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate198(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule84(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate197(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate198(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate200(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule83(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate199(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate200(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate202(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg3);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg3);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule86(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate201(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate202(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate208(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case _ => yynt = YYNTiexpr(yyrule80(yyarg1,yyarg4)); yygoto = 5
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate207(yyarg1: Expression, yyarg4: Cases) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynext; yygoto = yystate208(yyarg1,yyarg4);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate206(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTcase_list(yyrule144()); yygoto = 0
      case CoolTokens.CASE() => yynt = YYNTcase_list(yyrule143()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTcase_list(yyarg4) => yygoto = yystate207(yyarg1,yyarg4);
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.WHILE() => true
            case CoolTokens.VAR() => true
            case CoolTokens.NULL() => true
            case CoolTokens.STR_LIT(_) => true
            case CoolTokens.NEW() => true
            case CoolTokens.YYCHAR('-') => true
            case CoolTokens.THIS() => true
            case CoolTokens.YYCHAR('!') => true
            case CoolTokens.YYCHAR('}') => true
            case CoolTokens.OBJECTID(_) => true
            case CoolTokens.YYCHAR('{') => true
            case CoolTokens.YYCHAR('(') => true
            case CoolTokens.SUPER() => true
            case CoolTokens.INT_LIT(_) => true
            case CoolTokens.IF() => true
            case CoolTokens.ARROW() => true
            case CoolTokens.BOOL_LIT(_) => true
            case _ => false
          }})
          yygoto = yystate74();
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate205(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('{') => yynext; yygoto = yystate206(yyarg1);
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate204(yyarg1: Expression, yyarg3: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg3);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg3);
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg3);
      case _ => yynt = YYNTiexpr(yyrule82(yyarg1,yyarg3)); yygoto = 3
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate203(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg3) => yynext; yygoto = yystate31(yyarg3);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg3) => yygoto = yystate204(yyarg1,yyarg3);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate209(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTistmt_list(yyrule124(yyarg1)); yygoto = 2
      case CoolTokens.STR_LIT(_) => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('{') => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('(') => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.INT_LIT(_) => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.OBJECTID(_) => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.VAR() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.NULL() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('-') => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.WHILE() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.THIS() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.YYCHAR('!') => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.SUPER() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.NEW() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.IF() => yynt = YYNTistmt_list(yyrule126(yyarg1)); yygoto = 2
      case CoolTokens.CASE() => yynt = YYNTistmt_list(yyrule124(yyarg1)); yygoto = 2
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate187(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate188(yyarg1);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate190(yyarg1);
      case CoolTokens.LE() => yynext; yygoto = yystate195(yyarg1);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate192(yyarg1);
      case CoolTokens.YYCHAR('}') => yynt = YYNTistmt_list(yyrule125(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate197(yyarg1);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate199(yyarg1);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate201(yyarg1);
      case CoolTokens.MATCH() => yynext; yygoto = yystate205(yyarg1);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate203(yyarg1);
      case CoolTokens.CASE() => yynt = YYNTistmt_list(yyrule125(yyarg1)); yygoto = 1
      case CoolTokens.YYCHAR(';') => yynext; yygoto = yystate209(yyarg1);
      case _ => yynt = YYNTistmt_list(yyrule130(yyarg1)); yygoto = 1
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate158() : Int = {
    var yygoto : Int = 0;
    try {
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTiexpr(yyrule92()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTiexpr(yyrule79()); yygoto = 0
      case CoolTokens.INT_LIT(_) => yynt = YYNTiexpr(yyrule91()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTiexpr(yyrule93()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg1) => yynext; yygoto = yystate159(yyarg1);
      case CoolTokens.VAR() => yynext; yygoto = yystate162();
      case CoolTokens.NULL() => yynt = YYNTiexpr(yyrule90()); yygoto = 0
      case CoolTokens.WHILE() => yynext; yygoto = yystate166();
      case CoolTokens.THIS() => yynt = YYNTiexpr(yyrule94()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate171();
      case CoolTokens.IF() => yynext; yygoto = yystate173();
      case CoolTokens.NEW() => yynt = YYNTiexpr(yyrule81()); yygoto = 0
      case CoolTokens.SUPER() => yynext; yygoto = yystate180();
      case _ => yynt = YYNTerror("syntax error");
    }
    } catch {
      case YYError(s) => yynt = YYNTerror(s);
    }
    while (yygoto == 0) {
      try {
      yynt match {
        case YYNTerror(s) => 
          if (yycur == CoolTokens.YYEOF()) return 0;          yyerror(s)
          yypanic({ t:CoolTokens.YYToken => t match {
            case CoolTokens.LE() => true
            case CoolTokens.YYCHAR('=') => true
            case CoolTokens.YYCHAR('/') => true
            case CoolTokens.YYCHAR('*') => true
            case CoolTokens.YYCHAR('.') => true
            case CoolTokens.YYCHAR('<') => true
            case CoolTokens.ELSE() => true
            case CoolTokens.YYCHAR('-') => true
            case CoolTokens.YYCHAR(';') => true
            case CoolTokens.YYCHAR('}') => true
            case CoolTokens.EQEQ() => true
            case CoolTokens.YYCHAR('{') => true
            case CoolTokens.MATCH() => true
            case CoolTokens.YYCHAR('(') => true
            case CoolTokens.CASE() => true
            case CoolTokens.YYCHAR('+') => true
            case _ => false
          }})
          yygoto = yystate184();
        case YYNTistmt_list(yyarg1) => yygoto = yystate186(yyarg1);
        case YYNTiexpr(yyarg1) => yygoto = yystate187(yyarg1);
      }
      } catch {
        case YYError(s) => yynt = YYNTerror(s);
      }
    }
    yygoto-1
  }

  private def yystate105(yyarg1: Formal) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR(')') => yynt = YYNTvar_formal(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(',') => yynt = YYNTvar_formal(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTvar_formal => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate104() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.VAR() => yynt = YYNTvar_formal(yyrule14()); yygoto = 0
      case _ => yynt = YYNTvar_formal(yyrule14()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar_formal(yyarg1) => yygoto = yystate105(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate111(yyarg1: Expressions) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.CLASS() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('/') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.OVERRIDE() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.LE() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('.') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('}') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.STR_LIT(_) => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('{') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(')') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.OBJECTID(_) => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.INT_LIT(_) => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('*') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.VAR() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('-') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.NULL() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.WHILE() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.ELSE() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.THIS() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('<') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('+') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('!') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.IF() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.SUPER() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.NEW() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.MATCH() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.DEF() => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(';') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(',') => yynt = YYNTactuals(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTactuals => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate110() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate42();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTactuals(yyarg1) => yygoto = yystate111(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate117(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTblock(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTblock(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTblock => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate116() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTblock(yyrule111()); yygoto = 0
      case CoolTokens.STR_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.INT_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.OBJECTID(_) => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.VAR() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.NULL() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.WHILE() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.THIS() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.CASE() => yynt = YYNTblock(yyrule111()); yygoto = 0
      case CoolTokens.SUPER() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.NEW() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case CoolTokens.IF() => yynt = YYNTblock(yyrule112()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTblock(yyarg1) => yygoto = yystate117(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate109() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTvar1(); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTvar1 => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate108() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yyrule16(); yynt = YYNTvar1(); yygoto = 0
      case CoolTokens.VAR() => yyrule15(); yynt = YYNTvar1(); yygoto = 0
      case _ => yyrule16(); yynt = YYNTvar1(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTvar1() => yygoto = yystate109();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate115() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTno_comma2a(); yygoto = 2;
      case CoolTokens.VAR() => yynt = YYNTno_comma2a(); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTno_comma2a => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate114() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yyrule159(); yynt = YYNTno_comma2a(); yygoto = 0
      case CoolTokens.VAR() => yyrule159(); yynt = YYNTno_comma2a(); yygoto = 0
      case CoolTokens.YYCHAR(',') => yyrule160(); yynt = YYNTno_comma2a(); yygoto = 0
      case _ => yyrule159(); yynt = YYNTno_comma2a(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma2a() => yygoto = yystate115();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate119(yyarg1: Expression) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EQEQ() => yynext; yygoto = yystate49(yyarg1);
      case CoolTokens.YYCHAR('/') => yynext; yygoto = yystate51(yyarg1);
      case CoolTokens.LE() => yynext; yygoto = yystate62(yyarg1);
      case CoolTokens.YYCHAR('.') => yynext; yygoto = yystate53(yyarg1);
      case CoolTokens.YYCHAR('}') => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(')') => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR('*') => yynext; yygoto = yystate56(yyarg1);
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate58(yyarg1);
      case CoolTokens.YYCHAR('<') => yynext; yygoto = yystate66(yyarg1);
      case CoolTokens.YYCHAR('+') => yynext; yygoto = yystate60(yyarg1);
      case CoolTokens.CASE() => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case CoolTokens.MATCH() => yynext; yygoto = yystate70(yyarg1);
      case CoolTokens.YYCHAR(';') => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case CoolTokens.YYCHAR(',') => yynt = YYNTexpr(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTexpr => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate118() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTexpr(yyrule68()); yygoto = 0
      case CoolTokens.YYCHAR('{') => yynt = YYNTexpr(yyrule52()); yygoto = 0
      case CoolTokens.YYCHAR('(') => yynext; yygoto = yystate30();
      case CoolTokens.INT_LIT(_) => yynt = YYNTexpr(yyrule67()); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTexpr(yyrule69()); yygoto = 0
      case CoolTokens.OBJECTID(yyarg1) => yynext; yygoto = yystate31(yyarg1);
      case CoolTokens.NULL() => yynt = YYNTexpr(yyrule66()); yygoto = 0
      case CoolTokens.YYCHAR('-') => yynext; yygoto = yystate33();
      case CoolTokens.WHILE() => yynext; yygoto = yystate34();
      case CoolTokens.THIS() => yynt = YYNTexpr(yyrule70()); yygoto = 0
      case CoolTokens.YYCHAR('!') => yynext; yygoto = yystate36();
      case CoolTokens.SUPER() => yynext; yygoto = yystate39();
      case CoolTokens.IF() => yynext; yygoto = yystate37();
      case CoolTokens.NEW() => yynt = YYNTexpr(yyrule54()); yygoto = 0
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTexpr(yyarg1) => yygoto = yystate119(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate215() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.OBJECTID(_) => yynt = YYNTsimple_case(yyrule149()); yygoto = 1
      case CoolTokens.NULL() => yynt = YYNTsimple_case(yyrule150()); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate216(yyarg1: Case) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('}') => yynt = YYNTsimple_case(yyarg1); yygoto = 2;
      case CoolTokens.CASE() => yynt = YYNTsimple_case(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsimple_case => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate214() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.CASE() => yynext; yygoto = yystate215();
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTsimple_case(yyarg1) => yygoto = yystate216(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate211() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.YYCHAR('{') => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.YYCHAR('(') => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.INT_LIT(_) => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.BOOL_LIT(_) => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.OBJECTID(_) => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.NULL() => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.YYCHAR('-') => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.WHILE() => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.THIS() => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.YYCHAR('!') => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.SUPER() => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.IF() => yynt = YYNTno_comma3a(); yygoto = 2;
      case CoolTokens.NEW() => yynt = YYNTno_comma3a(); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTno_comma3a => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate210() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.STR_LIT(_) => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.YYCHAR('{') => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.YYCHAR('(') => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.BOOL_LIT(_) => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.OBJECTID(_) => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.INT_LIT(_) => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.NULL() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.YYCHAR('-') => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.WHILE() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.THIS() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.YYCHAR('!') => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.IF() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.NEW() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.SUPER() => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
      case CoolTokens.YYCHAR(',') => yyrule162(); yynt = YYNTno_comma3a(); yygoto = 0
      case _ => yyrule161(); yynt = YYNTno_comma3a(); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTno_comma3a() => yygoto = yystate211();
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate18(yyarg2: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('(') => yynt = YYNTsuperclass(yyrule20(yyarg2)); yygoto = 2
      case _ => yynt = YYNTsuperclass(yyrule21(yyarg2)); yygoto = 2
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate17() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.TYPEID(yyarg2) => yynext; yygoto = yystate18(yyarg2);
      case CoolTokens.NATIVE() => yynt = YYNTsuperclass(yyrule22()); yygoto = 1
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate19(yyarg1: Symbol) : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.YYCHAR('{') => yynt = YYNTsuperclass(yyarg1); yygoto = 2;
      case _ => yynt = YYNTerror("syntax error");
    }
    while (yygoto == 0) {
      yynt match {
        case _:YYNTsuperclass => return 0;
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

  private def yystate16() : Int = {
    var yygoto : Int = 0;
    yycur match {
      case CoolTokens.EXTENDS() => yynext; yygoto = yystate17();
      case CoolTokens.YYCHAR('{') => yynt = YYNTsuperclass(yyrule19()); yygoto = 0
      case _ => yynt = YYNTsuperclass(yyrule19()); yygoto = 0
    }
    while (yygoto == 0) {
      yynt match {
        case YYNTsuperclass(yyarg1) => yygoto = yystate19(yyarg1);
        case _:YYNTerror => return 0;
      }
    }
    yygoto-1
  }

/* The following three lines are for the .SKEL file ## */
/************************************************************************/
/*                DON'T CHANGE ANYTHING IN THIS SECTION                 */
/************************************************************************/

// Features all added automatically to the parser class

var scanner : CoolScanner = null;
var filename : String = "<unknown>";
var num_errors : Int = 0;
var result : Classes = new Classes_nil();
var superclass_name : Symbol = null;
var current_inherit_status : Boolean = true;
var io : IO = new IO();
var options : CoolOptions = new CoolOptions();

def get_result() : Classes = result;

def set_options(co : CoolOptions) : Unit = {
  options = co;
  yydebug = co.get_parse_debug()
};

def reset(sc : CoolScanner, fn : String) : Unit = {
  filename = fn;
  scanner = sc;
  num_errors = 0;
  result = new Classes_nil();
  superclass_name = null;
  current_inherit_status = true;

  yyreset(sc)
};

def symbol(name : String) : Symbol = io.symbol(name);

// Customizing the node factory
override def get_line_number() : Int = scanner.getLineNumber();

// we override the class_decl factory method to use the 
// variable "current_inherit_status" AND 
// to reset it afterwards for the next class.
override def class_decl(name:Symbol,parent:Symbol,features:Features,filename:Symbol) : Cclass_decl = {
  var result : Cclass_decl = super.class_decl(name,parent,features,filename);
  t_Tree.s_inheritablep(result,current_inherit_status);
  current_inherit_status = true;
  result
};


// Code to help build constructors:
var constr_is_native : Boolean = false;
var constr_body : Expressions = new Expressions_nil();
var attr_parameters : Features = new Features_nil();

def add_to_constructor(e : Expression) : Unit = { 
  constr_body = constr_body.addcopy(e)
};

def attr_parameter(name : Symbol, typename : Symbol) : Formal = {
  var mod_name : Symbol = symbol(name.toString());
  attr_parameters = attr_parameters.addcopy(attr(name,typename));
  add_to_constructor(assign(name,variable(mod_name)));
  formal(mod_name,typename);
};

def add_supercall(supername : Symbol, actuals : Expressions) : Unit = {
  add_to_constructor(static_dispatch(variable(symbol("this")),
				     supername,supername,actuals))
};

def native_constructor() : Unit = {
  constr_is_native = true
};

def make_constructor(name : Symbol, formals : Formals) : Features = {
  // Create the constructor and return a list of features
  // including all the parameter attributes and the constructor.
  // If the constructor is native, then the body should be no_expr()
  // otherwise it should be a block of the pieces collected so far
  // ending with "this" (to return the newly initialized object).
  //
  // Before returning, the side-effected variables need to be reset:
  // - constr_is_native
  // - constr_body
  // - attr_parameters
  // This will give the next class a clean slate for its own constructor.
  var body : Expressions = constr_body.addcopy(variable(symbol("this")));
  var constr : Feature = 
    method(false,name,formals,name,
	   if (constr_is_native) no_expr() 
	     else block(body));
  var result : Features = attr_parameters.addcopy(constr);
  constr_is_native = false;
  constr_body = new Expressions_nil();
  attr_parameters = new Features_nil();
  result
};

/* This function is called automatically when Bison detects a parse error. */
def yyerror(message : String) : Unit = {
  io.out(filename).out(":").out_any(scanner.getLineNumber()).out(": ");
  io.out(message).out(", at or near ").out_any(yycur).out("\n");

  num_errors = num_errors + 1;
  var max : Int = options.get_max_errors();
  if (max < num_errors) io.abort("More than ".concat(max.toString()).concat(" errors")) else ()
};

def get_errors() : Int = num_errors;
// #(
// The following are for the instrumented parser (test3)
def paren(e:Expression) = e;
def eq(e1:Expression,e2:Expression) = super.dispatch(e1,symbol("equals"),new Expressions_one(e2));
def implicit_dispatch(e : Expression, s : Symbol, a : Expressions) : Expression
  = super.dispatch(e,s,a);
def attr_init(s : Symbol, e : Expression) : Expression = super.assign(s,e);
// #)

}
